You are modifying a JS game with this file layout:
world-utils.js, rig-definitions.js, items-and-crafting.js, spawns.js, region-manager.js, nen-core.js, nen-advanced.js, nen-combat.js, hud.js, game.js, enemies.js, rig-editor.js, index.html, styles.css.

Hard rules for code output (follow exactly):
Before removing any feature, ask if it’s relevant; otherwise do not remove.

Constraints: Do not break existing HUD buttons, attacks, gameplay, or terrain generation. Keep index.html and styles.css working. Use modern, clean JS (no transpile step).

Deliverables per task:
• The code per the rules above
• A short “What changed / Why” note
• Quick manual test steps


Task 41 — Onion-Skin (ghost) Preview (optional toggle)

Files: rig-editor.js, game.js
Prompt:
Add an Onion Skin toggle for editor viewport: render ghost poses at a small set of frames (e.g., −2, −1, +1, +2) around playhead with reduced opacity. Implementation can temporarily apply transforms to a cloned rig or draw overlay poses; keep perf budgeted.
Done check: Toggling shows faded poses before/after current frame; off restores normal view.
Quick manual test: Enable ghosting; scrub; verify translucent past/future poses update.

Task 42 — Rig Type Selector & Xform Gizmos (multi-rig support)

Files: rig-editor.js, rig-definitions.js
Prompt:
Add rig type selection inside editor: anthropomorphic bipedal, aquatic quadruped, monkey build, etc. For each, expose the same Translate/Rotate/Scale limb editing tools (reuse current humanoid T/R/S flow). Ensure timelines work across rig types.
Done check: Switching rig type swaps the joint list and preserves editor features; T/R/S works on limbs.
Quick manual test: Switch to “aquatic quadruped”, rotate a fin, insert key, play; repeat on “monkey build.”

Task 43 — Creator ↔ Rig Editor Hand-off (preview what you animate)

Files: game.js, rig-editor.js, hud.js
Prompt:
Allow sending the current character from the Character Creator (Task 32) into the Rig Editor, and vice-versa. Preserve cosmetics and rig selection; ensure editor playback doesn’t leak into gameplay.
Done check: “Edit in Rig Editor” button loads the same rig look; exit returns to game with cosmetics intact.
Quick manual test: Style avatar (hair/face/outfit); open editor; confirm look; exit editor; return to game unchanged.

Task 44 — Minor UX Polish (color cues, indicators, zoom/pan)

Files: rig-editor.js, styles.css
Prompt:
Polish the editor UI:

Selected keyframe highlight (yellow/bright).

Channel keyed indicators (e.g., small dot/green state).

Timeline zoom/pan (wheel to zoom time, drag to pan), ruler tick density adapts.

Tooltips on icons (play, add key, auto-key).
Done check: Visual cues match expectations; zoom/pan works on long clips.
Quick manual test: Zoom out to 300 frames; pan; hover icons for tooltips; confirm selected vs unselected key colors.

Task 45 — Save/Load Animations & Cosmetics (session + JSON export)

Files: rig-editor.js, game.js, hud.js
Prompt:
Add Save/Load for:

Animation clips (JSON export/import for the data model).

Cosmetic loadouts from Character Creator (faces/hair/outfits/shoes/accessories).
Integrate with existing save system if present; otherwise use localStorage fallback.
Done check: Reloading restores current clip and cosmetic setup; JSON export/import round-trips.
Quick manual test: Save a “Walk” clip and “Explorer” outfit; reload page; load both; verify identical state.

