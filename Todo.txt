You are modifying a JS game with this file layout:
world-utils.js, rig-definitions.js, items-and-crafting.js, spawns.js, region-manager.js, nen-core.js, nen-advanced.js, nen-combat.js, hud.js, game.js, enemies.js, rig-editor.js, index.html, styles.css.

Hard rules for code output (follow exactly):

If any single function changes by > 25 lines, print the entire function with edits.

If total changes in a reply are > 200 lines, print the entire file, preserving all existing features.

If code changes are ≤ 25 lines, print the patch with 3 lines of context above and below.

Before removing any feature, ask if it’s relevant; otherwise do not remove.

Constraints: Do not break existing HUD buttons, attacks, gameplay, or terrain generation. Keep index.html and styles.css working. Use modern, clean JS (no transpile step).

Deliverables per task:

The code per the rules above

A short “What changed / Why” note

Quick manual test steps

Task 0 — Index the codebase and confirm hooks

Prompt to Codex:

Read all listed files. Output a 10–15 line summary of what each file currently exposes (functions/exports) and where input handling, damage calculation, spawning, and HUD rendering live. Identify safe insertion points for Nen systems, inventory, regions, and enemies. Do not modify code.

Task 1 — Inputs + base state (Nen stubs only)

Files: game.js, hud.js, nen-core.js
Prompt:

Add key bindings and base state only (no effects yet).

Reserve keys: T(Ten), Z(Zetsu), R (hold Ren), G(Gyo), V(En), B(Shu), K(Ken), C+LMB (Ko), Wheel (Ryu), Tab (radial).

Add to global state:

state.aura = { ten:false, zetsu:false, ren:false, ken:false, in:false, gyo:false, shu:false, en:{ on:false, r:0 } };
state.flow = { head:.09, torso:.25, rArm:.166, lArm:.166, rLeg:.166, lLeg:.166 };
state.vows = [];
state.nen = { max:100, cur:100, regen:2.0 }; // numbers placeholder


HUD: small strip that renders current ON/OFF for Ten/Zetsu/Ren/Ken/Gyo/Shu/En.

No drains or combat effects yet.
Follow my output rules.

Done check: Toggling keys flips booleans in state and HUD badges reflect it.

Task 2 — Nen economy loop (regen/leak/drains)

Files: nen-core.js, hud.js
Prompt:

Implement nenTick(dt) that updates state.nen.cur given:

Base leak = 0.8/s if neither Ten nor Zetsu; 0 if Ten or Zetsu.

Ren on: add a ramp multiplier to output (store as state.aura.renMul) and drain (start simple: +1.0/s while held).

Ken drains 1.8/s; Gyo 0.6/s; Shu 1.0/s; En drains map(state.aura.en.r, 6..18m) → 4..10/s.

Clamp state.nen.cur to [0, state.nen.max].
HUD adds a Nen bar with tooltip listing current drains. Follow my output rules.

Done check: With modes toggled, the bar changes predictably; letting go returns to regen.

Task 3 — Damage centralization hooks

Files: nen-combat.js
Prompt:

Route all outgoing and incoming damage through:

export function applyOutgoingDamage(src, limb, baseDamage) { /* stub now */ }
export function applyIncomingDamage(dst, limb, baseDamage) { /* stub now */ }


For now, just return baseDamage. Wire existing melee/projectile paths to call these (light-touch edits). Follow my output rules.

Done check: No numeric changes yet; logs prove both hooks are hit.

Task 4 — Ko / Ken / Ryu (phase 1 wiring)

Files: nen-combat.js, hud.js, nen-core.js
Prompt:

Ken: when on, apply damage reduction to applyIncomingDamage (start with 25% DR).

Ryu: while Ken held, mouse wheel adjusts state.flow presets (e.g., 70/30 arms vs 60/40 torso; keep sum=1.0). HUD pie shows current distribution. Use simple presets first.

Ko: on C+LMB, consume 10 + (AAP*0.5) Nen (stub AAP as 1.0 for now), apply a 2.5× multiplier to the chosen limb for one strike and set a vulnerability timer 0.8s (incoming damage ×1.5).
Follow my output rules.

Done check: Ken reduces incoming damage; wheel shifts pie; C+LMB spikes damage then opens a brief vulnerability window.

Task 5 — Gyo & In (vision + conceal)

Files: nen-advanced.js, hud.js, nen-combat.js
Prompt:

Gyo (G): drain 0.6/s, add vignette overlay; mark weak points on enemies (+15% crit window: widen timing or multiplier in applyOutgoingDamage).

In: next conjured trap/emitted orb gets {concealed:true}; charge 8 Nen upfront + 1/s upkeep until it’s placed/fired or Ko is used (Ko cancels upkeep).

Enemies & player with Gyo on can see “In” objects; others can’t.
Follow my output rules.

Done check: G toggles highlights; triggering In changes visibility; Ko cancels In upkeep.

Task 6 — En (pulse & maintain)

Files: nen-advanced.js, hud.js
Prompt:

Implement En behavior:

Pulse (V tap): spend 12 Nen; perform a 12m sense ping; apply 0.3s time-dilation to projectiles/daggers within ping radius.

Maintain (V hold): expand radius from 6→18m over 1s; drain 4..10/s as radius grows; draw faint silhouettes for sensed entities.
Follow my output rules.

Done check: Pulse slows projectiles briefly; hold shows silhouettes and drains faster at larger radii.

Task 7 — Shu (imbue) + projectiles pierce 1

Files: nen-advanced.js, nen-combat.js, items-and-crafting.js
Prompt:

Shu (B toggle): while a weapon is equipped, increase weapon damage and durability efficiency; thrown/shot projectiles pierce 1 enemy. Drain 1/s while a weapon is out.

Add a tiny “Shu” glyph on active weapon in HUD.
Follow my output rules.

Done check: Projectiles hit two targets max; melee shows higher damage; dur. drains slower.

Task 8 — Inventory + equipment + durability

Files: items-and-crafting.js, hud.js, game.js
Prompt:

Define Item schema { id, slot, type, dmg, dur, tags, stack }.

Implement inventory = { slots:[], hotbar:[], add(), use(), equip() }.

HUD hotbar (1–9) equips active item.

On hit, reduce durability; at 0, item breaks and unequips.
Follow my output rules.

Done check: Pick up, equip, and break a sword; HUD updates correctly.

Task 9 — Regions + spawns (Minecraft-like without mining/building)

Files: region-manager.js, spawns.js, world-utils.js, enemies.js
Prompt:

Region schema { id, name, bounds, ambient, spawnTable, difficulty } + registry.

setRegion(id) swaps ambient and spawn tables; /region set <id> dev command.

spawns.js: per-region spawn controller with wave size, cadence, and enemy mix.

world-utils.js: applyRegionVisuals(region) for sky/fog/ground tint.
Follow my output rules.

Done check: Switching regions clearly changes visuals and enemy compositions.

Task 10 — Nen type specials + Tab radial

Files: nen-core.js, nen-advanced.js, nen-combat.js, hud.js
Prompt:

Add state.nenType and implement specials (minimal but functional):

Enhancer: Ren stacks add DR to Ken; Ko emits a small shockwave AoE.

Transmuter: emitted shots gain one property (sticky/elastic/conductive) selected from a Tab radial menu.

Emitter: blasts persist longer; volley gains slight homing during En pulse.

Conjurer: place a Bound Sigil (E) that buffs a selected vow rule inside 6m; visible only in Gyo.

Manipulator: tag darts/threads; on 3 tags, Compel (0.8s) or Jam.

Specialist: your time distortion scales on Focus & vow severity; auto-end when Nen ≤ ultMin.
Follow my output rules.

Done check: Each type produces at least one observable effect in a test arena.

Task 11 — Vows UI + rule engine

Files: nen-advanced.js, hud.js, game.js, nen-combat.js
Prompt:

Menu to craft 1–3 active vows; schema { ruleId, strength, lethal }; show multipliers preview; serialize to save.

Implement sample rules:

“Only Ko strikes this wave” → +35% Ko power; Ken disabled.

“No dash this wave” → +20% all Nen damage.

“Only attack marked elite” → +60% vs that target; –30% others.

“I’ll die if I break it” checkbox: doubles the bonus; violating downs the player.
Follow my output rules.

Done check: Picking vows changes combat; violating lethal vow downs the player.

Task 12 — Enemies & counterplay

Files: enemies.js, nen-combat.js, hud.js
Prompt:

Add archetypes with Nen literacy:

Bruiser: telegraphs Ko to a limb (glow); blocking with correct Ryu distribution mitigates it.

Assassin: enters Zetsu and attempts backstab; Gyo counters.

Emitter/Conjurer adds: ranged traps/orbs that interact with In/En.
HUD subtly indicates detected enemy aura flows when Gyo is active. Follow my output rules.

Done check: Player technique choice (Gyo/Ryu) measurably changes survival.

Task 13 — Training minigames & progression caps

Files: hud.js, nen-advanced.js, game.js
Prompt:

Implement four lightweight minigames that permanently raise caps or efficiencies:

Ren hold meter (extends Ren duration cap)

Gyo numbers (accuracy → crit window bonus cap)

Ryu drill (faster/more precise redistribution)

Shu rock test (Shu efficiency)
Persist results; show ceilings in HUD tooltips. Follow my output rules.

Done check: Successful minigames increase the displayed caps and change gameplay feel.

Task 14 — Post-Mortem Nen, curses, exorcism

Files: nen-advanced.js, enemies.js, hud.js
Prompt:

Add Grudge bar; on player death with full Grudge, apply a Curse Mark (DoT+slow) to killer.

Enemies can leave lingering curses; add consumable/quest to exorcise.
Follow my output rules.

Done check: The effect triggers on death appropriately; exorcism clears it.

Task 15 — Save/Load + QA polish

Files: game.js, hud.js
Prompt:

Serialize: inventory, vows, nenType, stat ceilings, region progress, and Nen pools. On load, restore HUD and all toggles. Add a quick in-game test panel (dev-only) to flip modes and spawn target dummies. Follow my output rules.

Done check: Quit/reload returns to the same state; dev panel toggles help QA.